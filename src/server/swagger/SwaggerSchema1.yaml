openapi: 3.0.0
x-internal-id:
  title: API
  application/xml: '<users><user>Alice</user><user>Bob</user></users>'
info:
  title: Sample Pet Store App
  description: 'This is a "sample" server for a pet store.'
  termsOfService: http://example.com/terms/
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.1

components:
  schemas:
    GeneralError:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
  parameters:
    skipParam:
      name: skip
      in: query
      description: number of items to skip
      required: true
      schema:
        type: integer
        format: int32
    limitParam:
      name: limit
      in: query
      description: max records to return
      required: true
      schema:
        type: integer
        format: int32
  responses:
    NotFound:
      description: Entity not found.
    IllegalInput:
      description: Illegal input for operation.
    GeneralError:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GeneralError'
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://example.org/api/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets


servers:
  - url: http://api.NotExample.com/v2
    description: Optional server description, e.g. Main (production) server
    variables:
      username:
        # note! no enum here means it is an open value
        default: demo
        description: this value is assigned by the service provider, in this example `gigantic-server.com`
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
      basePath:
        # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
        default: v2
  - url: http://api.example.com/swagger_file
    description: Optional server description, e.g. Main (production) server
    variables:
      username:
        # note! no enum here means it is an open value
        default: demo
        description: this value is assigned by the service provider, in this example `gigantic-server.com`
      port:
        enum:
          - '8443'
          - '443'
        default: '8443'
      basePath:
        # open meaning there is the opportunity to use special base paths as assigned by the provider, default is `v2`
        default: v2
paths:
  /megaRequest:
    patch:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: string
      requestBody:
        content:
          'application/x-www-form-urlencoded':
            schema:
              properties:
                name:
                  description: Updated name of the pet
                  type: string
                status:
                  description: Updated status of the pet
                  type: string
              required:
                - status
      responses:
        '200':
          description: Pet updated.
          content:
            'application/json': {}
            'application/xml': {}
        '405':
          description: Method Not Allowed
          content:
            'application/json': {}
            'application/xml': {}
      security:
        - petstore_auth:
            - write:pets
            - read:pets

  /userss/user:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /variable/{id}:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /{id}/variableBefore:
    get:
      summary: Returns a list of users.
      description: Optional extended description in CommonMark or HTML.
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  /some/users:
    get:
      summary: Returns a list of users.
      description: "Optional extended description in CommonMark or HTML."
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
              examples:
                cat:
                  summary: An example of a cat
                  value:
                    name: Fluffy
                    petType: Cat
                    color: White
                    gender: male
                    breed: Persian
                dog:
                  summary: An example of a dog with a cat's name
                  value:
                    name: Puma
                    petType: Dog
                    color: Black
                    gender: Female
                    breed: Mixed
                frog:
                  $ref: "#/components/examples/frog-example"

  /pets:
    get:
      responses:
        '200':
          description: A list of pets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pet'
  /petsActuallyTheSameStructure:
    get:
      responses:
        '200':
          description: A list of pets.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/pet'
  /someAnother:
    get:
      description: Returns pets based on ID
      summary: Find pets by ID
      operationId: getPetsById
      responses:
        '200':
          description: pet response
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  summary: User Example
                  externalValue: 'http://foo.bar/examples/user-example.json'
            'application/xml':
              schema:
                $ref: '#/components/schemas/User'
              examples:
                user:
                  summary: User Example in XML
                  externalValue: 'http://foo.bar/examples/user-example.xml'
            'text/plain':
              examples:
                user:
                  summary: User example in text plain format
                  externalValue: 'http://foo.bar/examples/user-example.txt'
            '*/*':
              examples:
                user:
                  summary: User example in other format
                  externalValue: 'http://foo.bar/examples/user-example.whatever'
        default:
          description: error payload
          content:
            'text/html':
              schema:
                $ref: '#/components/schemas/ErrorModel'
      parameters:
        - name: id
          in: path
          description: ID of pet to use
          required: true
          schema:
            type: array
            items:
              type: string
          style: simple

